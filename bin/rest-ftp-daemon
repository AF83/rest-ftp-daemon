#!/usr/bin/env ruby

# Libs and init
require "thin"

# Include config file and build rack commandline
app_root = File.expand_path(File.dirname(__FILE__) + '/../')
require File.expand_path("lib/rest-ftp-daemon/config.rb")

# Build rackup context
settings_daemonize = [nil, true, 1, "1"].include?(Settings.daemonize)
argv = ARGV
argv << ["-e", "development"] unless ARGV.include?("-e")
argv << ["-p", Settings[:port].to_s] unless ARGV.include?("-p") || Settings[:port].nil?
argv << ["-l", Settings[:logs][:thin]] unless ARGV.include?("-l") unless Settings[:logs][:thin].nil? unless Settings[:logs].nil?
argv << ["--daemonize"] if settings_daemonize unless (ARGV.include?("-d") || ARGV.include?("--daemonize"))
argv << ["-R", File.expand_path("config.ru")] unless ARGV.include?("-R")

# Display compiled configuration
puts
puts "Daemon name \t #{Settings.app_name}"
puts "Version     \t #{Settings.app_ver}"
puts "Environment \t #{Settings.namespace}"
puts "Config file \t #{Settings.source}"
puts "Parameters  \t #{argv.flatten}"
puts Settings.to_hash.to_yaml( :Indent => 4, :UseHeader => true, :UseVersion => false )

# Start Thin with this rackup configuration
puts
begin
  Thin::Runner.new(argv.flatten).run!
rescue Thin::PidFileExist
  puts "EXITING: daemon was already running (Thin::PidFileExist)"
rescue Thin::PidFileNotFound
  puts "EXITING: daemon was not running (Thin::PidFileNotFound)"
rescue Exception => e
  puts "EXITING: #{e.message}"
else
  puts "PROCESS ENDING"
end


