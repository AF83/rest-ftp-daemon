#!/usr/bin/env ruby

# Try to load libs and constants
app_root = File.dirname(__FILE__) + '/../'
begin
  require "thin"
  require 'optparse'
  require 'socket'
  require 'timeout'
rescue LoadError
  raise "EXITING: some of basic libs were not found: thin, optparse, socket, timeout"
end
require File.expand_path("#{app_root}/lib/rest-ftp-daemon/constants")
puts
#puts "--- #{APP_NAME} #{APP_VER}"

# Detect options from ARGV
options = {}
parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename $0} [options] start|stop|restart"
  opts.on("-c", "--config CONFIGFILE")                                 { |config| APP_CONF = config }
  opts.on("-e", "--environment ENV")                                   { |env| APP_ENV = env }
  opts.on("",   "--dev")                                               { APP_ENV = "development" }
  opts.on("-p", "--port PORT", "use PORT")                             { |port| options["port"] = port.to_i }
  opts.on("-w", "--workers COUNT", "Use COUNT worker threads")         { |count| options["workers"] = count.to_i }
  opts.on("-d", "--daemonize", "Run daemonized in the background")     { |bool| options["daemonize"] = true }
  opts.on("-f", "--foreground", "Run in the foreground")               { |bool| options["daemonize"] = false }
  opts.on("-P", "--pid FILE", "File to store PID")                     { |file| options["pidfile"] = file }
  opts.on("-u", "--user NAME", "User to run daemon as (use with -g)")  { |user| options["user"] = user }
  opts.on("-g", "--group NAME", "Group to run daemon as (use with -u)"){ |group| options["group"] = group }
  opts.on_tail("-h", "--help", "Show this message")                    { puts opts; exit }
  opts.on_tail('-v', '--version', "Show version (#{APP_VER})")         { puts APP_VER; exit }
end
begin
  parser.order!(ARGV)
  command = ARGV.shift
  unless ["start", "stop", "restart"].include? command
    puts parser
    exit 11
  end
rescue OptionParser::InvalidOption => e
  puts "EXITING: option parser: #{e.message}"
  exit 12
end

# Build configuration file path from options
APP_CONF ||= File.expand_path "/etc/#{APP_NAME}.yml"
unless File.exists? APP_CONF
  puts "EXITING: cannot read configuration file: #{APP_CONF}"
  exit 13
end

# Load helpers and config, and merge options from ARGV into settings
[:helpers, :config].each do |lib|
  require File.expand_path("#{app_root}/lib/rest-ftp-daemon/#{lib.to_s}")
end
Settings.merge!(options)

# Display compiled configuration
puts "--- #{APP_NAME} #{APP_VER}"
puts "Config file  \t #{APP_CONF}"
puts "PID file     \t #{Settings.pidfile}"
puts "Namespace    \t #{Settings.namespace}"
puts "Network port \t #{Settings['port']}"
puts "Daemonize    \t #{Settings['daemonize']}"
puts "User:group   \t #{Settings['user']}:#{Settings['group']}"
puts
puts Settings.to_hash.to_yaml( :Indent => 4, :UseHeader => true, :UseVersion => false )
puts

# Validate network configuration
if ["start"].include? command
  if Settings['port'].nil?
    puts "ABORTING: Network port is missing"
    exit 14
  elsif RestFtpDaemon::Helpers.local_port_used?(Settings['port'])
    puts "ABORTING: Network port #{Settings['port']} is already in use"
    exit 15
  end
end

# Build final ARGV
argv = []
argv << ["-e", Settings.namespace]
argv << ["-p", Settings["port"].to_s] unless Settings["port"].nil?
argv << ["--pid", Settings.pidfile]
argv << ["--tag", "'#{APP_NAME}/#{Settings.namespace}'"]
argv << ["--log", Settings["logs"]["thin"].to_s] unless Settings["logs"]["thin"].nil? if Settings["logs"].is_a? Enumerable
argv << ["--daemonize"] if [1, true].include? Settings["daemonize"]
# User / group
if Settings["user"] && Settings["group"]
  argv << ["--user", Settings["user"]]
  argv << ["--group", Settings["group"]]
end
argv << command unless command.nil? rescue nil
puts "--- Thin ARGV"
puts argv.flatten.join(' ')
puts


# Start Thin with this rackup configuration, changing to app_root first
begin
  Dir.chdir app_root
  r = Thin::Runner.new(argv.flatten).run!
rescue RuntimeError => e
  puts "FAILED: RuntimeError: #{e.message}"
rescue Thin::PidFileExist
  puts "FAILED: daemon was already running (Thin::PidFileExist)"
rescue Thin::PidFileNotFound
  puts "FAILED: daemon was not running (Thin::PidFileNotFound)"
rescue SystemExit
  # Leave some time for the daemon to launch
  pidfile = Settings.pidfile
    print "Waiting for pidfile"
  while !File.file?(pidfile) do
    print "."
    sleep 0.25
  end
  puts

  # Check that this process is running
  pid = File.read(pidfile).to_i
  begin
    Process.kill(0, pid)
    puts "Process ##{pid} is running"
  rescue Errno::EPERM                     # changed uid
      puts "No permission to query process ##{pid}!";
  rescue Errno::ESRCH
      puts "Process ##{pid} is NOT running.";      # or zombied
  rescue
      puts "Unable to determine status for ##{pid}: #{$!}"
  end
end
